#!/bin/bash
#
# live: Init script for live image
#
# chkconfig: 345 00 99
# description: Init script for live image.
### BEGIN INIT INFO
# X-Start-Before: display-manager chronyd
### END INIT INFO

. /etc/init.d/functions

if ! strstr "$(cat /proc/cmdline)" rd.live.image || [ "$1" != "start" ]; then
	exit 0
fi

if [ -e /.liveimg-configured ]; then
	configdone=1
fi

exists() {
	which "$1" >/dev/null 2>&1 || return
	"$@"
}

livedir="LiveOS"
for arg in "$(cat /proc/cmdline)"; do
	if [ "${arg##rd.live.dir=}" != "$arg" ]; then
		livedir=${arg##rd.live.dir=}
		continue
	fi
	if [ "${arg##live_dir=}" != "$arg" ]; then
		livedir=${arg##live_dir=}
	fi
done

# enable swapfile if it exists
if ! strstr "$(cat /proc/cmdline)" noswap && [ -f /run/initramfs/live/"$livedir"/swap.img ]; then
	action "Enabling swap file" swapon /run/initramfs/live/"$livedir"/swap.img
fi

mountPersistentHome() {
	# support label/uuid
	if [ "${homedev##LABEL=}" != "$homedev" -o "${homedev##UUID=}" != "$homedev" ]; then
		homedev=$(/sbin/blkid -o device -t "$homedev")
	fi

	# if we're given a file rather than a blockdev, loopback it
	if [ "${homedev##mtd}" != "$homedev" ]; then
		# mtd devs don't have a block device but get magic-mounted with -t jffs2
		mountopts="-t jffs2"
	elif [ ! -b "$homedev" ]; then
		loopdev=$(losetup -f)
		if [ "${homedev##/run/initramfs/live}" != "$homedev" ]; then
			action "Remounting live store r/w" mount -o remount,rw /run/initramfs/live
		fi
		losetup "$loopdev" "$homedev"
		homedev=$loopdev
	fi

	# if it's encrypted, we need to unlock it
	if [ "$(/sbin/blkid -s TYPE -o value "$homedev" 2>/dev/null)" = "crypto_LUKS" ]; then
		echo
		echo "Setting up encrypted /home device"
		plymouth ask-for-password --command="cryptsetup luksOpen $homedev EncHome"
		homedev=/dev/mapper/EncHome
	fi

	# and finally do the mount
	mount "$mountopts" "$homedev" /home
	# if we have /home under what's passed for persistent home, then
	# we should make that the real /home.  useful for mtd device on olpc
	if [ -d /home/home ]; then mount --bind /home/home /home; fi
	[ -x /sbin/restorecon ] && /sbin/restorecon /home
	if [ -d /home/liveuser ]; then USERADDARGS="-M"; fi
}

findPersistentHome() {
	for arg in "$(cat /proc/cmdline)"; do
		if [ "${arg##persistenthome=}" != "$arg" ]; then
			homedev=${arg##persistenthome=}
		fi
	done
}

if strstr "$(cat /proc/cmdline)" persistenthome=; then
	findPersistentHome
elif [ -e /run/initramfs/live/"$livedir"/home.img ]; then
	homedev=/run/initramfs/live/${livedir}/home.img
fi

# if we have a persistent /home, then we want to go ahead and mount it
if ! strstr "$(cat /proc/cmdline)" nopersistenthome && [ "$homedev" != "" ]; then
	action "Mounting persistent /home" mountPersistentHome
fi

if [ "$configdone" != "" ]; then
	exit 0
fi

# add liveuser user with no passwd
action "Adding live user" useradd "$USERADDARGS" -c "Live System User" liveuser
passwd -d liveuser >/dev/null
usermod -aG wheel liveuser >/dev/null

# Remove root password lock
passwd -d root >/dev/null

# turn off firstboot for livecd boots
systemctl --no-reload disable firstboot-text.service 2>/dev/null || :
systemctl --no-reload disable firstboot-graphical.service 2>/dev/null || :
systemctl stop firstboot-text.service 2>/dev/null || :
systemctl stop firstboot-graphical.service 2>/dev/null || :

# don't use prelink on a running live image
sed -i 's/PRELINKING=yes/PRELINKING=no/' /etc/sysconfig/prelink &>/dev/null || :

# turn off mdmonitor by default
systemctl --no-reload disable mdmonitor.service 2>/dev/null || :
systemctl --no-reload disable mdmonitor-takeover.service 2>/dev/null || :
systemctl stop mdmonitor.service 2>/dev/null || :
systemctl stop mdmonitor-takeover.service 2>/dev/null || :

# don't start cron/at as they tend to spawn things which are
# disk intensive that are painful on a live image
systemctl --no-reload disable crond.service 2>/dev/null || :
systemctl --no-reload disable atd.service 2>/dev/null || :
systemctl stop crond.service 2>/dev/null || :
systemctl stop atd.service 2>/dev/null || :

# turn off abrtd on a live image
systemctl --no-reload disable abrtd.service 2>/dev/null || :
systemctl stop abrtd.service 2>/dev/null || :

# Don't sync the system clock when running live (RHBZ #1018162)
sed -i 's/rtcsync//' /etc/chrony.conf

# Mark things as configured
touch /.liveimg-configured

# add static hostname to work around xauth bug
# https://bugzilla.redhat.com/show_bug.cgi?id=679486
# the hostname must be something else than 'localhost'
# https://bugzilla.redhat.com/show_bug.cgi?id=1370222
hostnamectl set-hostname "localhost-live"

# disable gnome-software automatically downloading updates
cat >>/usr/share/glib-2.0/schemas/org.gnome.software.gschema.override <<FOE
[org.gnome.software]
allow-updates=false
download-updates=false
FOE

# don't autostart gnome-software session service
rm -f /etc/xdg/autostart/gnome-software-service.desktop

# disable the gnome-software shell search provider
cat >>/usr/share/gnome-shell/search-providers/org.gnome.Software-search-provider.ini <<FOE
DefaultDisabled=true
FOE

# don't run gnome-initial-setup
mkdir ~liveuser/.config
touch ~liveuser/.config/gnome-initial-setup-done

# suppress anaconda spokes redundant with gnome-initial-setup
cat >>/etc/sysconfig/anaconda <<FOE
[NetworkSpoke]
visited=1

[PasswordSpoke]
visited=1

[UserSpoke]
visited=1
FOE

# make the installer show up
if [ -f /usr/share/applications/liveinst.desktop ]; then
	# Show harddisk install in shell dash
	sed -i -e 's/NoDisplay=true/NoDisplay=false/' /usr/share/applications/liveinst.desktop ""
	# need to move it to anaconda.desktop to make shell happy
	mv /usr/share/applications/liveinst.desktop /usr/share/applications/anaconda.desktop

	cat >>/usr/share/glib-2.0/schemas/org.gnome.shell.gschema.override <<FOE
[org.gnome.shell]
favorite-apps=['firefox.desktop', 'org.gnome.Calendar.desktop', 'rhythmbox.desktop', 'org.gnome.Photos.desktop', 'org.gnome.Nautilus.desktop', 'anaconda.desktop']
FOE

	# Make the welcome screen show up
	if [ -f /usr/share/anaconda/gnome/fedora-welcome.desktop ]; then
		mkdir -p ~liveuser/.config/autostart
		cp /usr/share/anaconda/gnome/fedora-welcome.desktop /usr/share/applications/
		cp /usr/share/anaconda/gnome/fedora-welcome.desktop ~liveuser/.config/autostart/
	fi

	# Disable GNOME welcome tour so it doesn't overlap with Fedora welcome screen
	cat >>/usr/share/glib-2.0/schemas/org.gnome.shell.gschema.override <<FOE
welcome-dialog-last-shown-version='4294967295'
FOE

	# Copy Anaconda branding in place
	if [ -d /usr/share/lorax/product/usr/share/anaconda ]; then
		cp -a /usr/share/lorax/product/* /
	fi
fi

# rebuild schema cache with any overrides we installed
glib-compile-schemas /usr/share/glib-2.0/schemas

# set up auto-login
cat >/etc/gdm/custom.conf <<FOE
[daemon]
AutomaticLoginEnable=True
AutomaticLogin=liveuser
FOE

# Turn off PackageKit-command-not-found while uninstalled
if [ -f /etc/PackageKit/CommandNotFound.conf ]; then
	sed -i -e 's/^SoftwareSourceSearch=true/SoftwareSourceSearch=false/' /etc/PackageKit/CommandNotFound.conf
fi

# make sure to set the right permissions and selinux contexts
chown -R liveuser:liveuser /home/liveuser/
restorecon -R /home/liveuser/
